# Generated by Django 4.1 on 2022-08-30 15:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(max_length=50, verbose_name='Имя')),
                ('last_name', models.CharField(max_length=50, verbose_name='Фамилия')),
                ('father_name', models.CharField(blank=True, max_length=50, verbose_name='Отчество')),
                ('date_of_birth', models.DateField(default='2000-01-12', verbose_name='Дата рождения')),
                ('gender', models.CharField(choices=[('m', 'Мужчина'), ('f', 'Женщина')], default='f', max_length=1, verbose_name='Пол')),
                ('groups', models.CharField(choices=[('d', 'Доктор'), ('a', 'Админ'), ('p', 'Пациент')], max_length=1, verbose_name='Группа')),
                ('social_status', models.CharField(blank=True, choices=[('h', 'Высший'), ('l', 'Низший'), ('m', 'Средний')], max_length=1, verbose_name='Соц. Статус')),
                ('disability', models.CharField(blank=True, choices=[('3', 'Третья'), ('2', 'Вторая'), ('1', 'Первая')], max_length=1, verbose_name='Инвалидность')),
                ('blood', models.CharField(blank=True, choices=[('4+', 'AB(IV) Rh+'), ('1-', 'O(I) Rh- '), ('3-', 'B(III) Rh- '), ('2+', 'A(II) Rh+ '), ('3+', 'B(III) Rh+ '), ('1+', 'O(I) Rh+ '), ('4-', 'AB(IV) Rh-'), ('2-', 'A(II) Rh- ')], max_length=2, verbose_name='Группа крови')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, region=None, unique=True, verbose_name='Телефонный номер')),
                ('work_address', models.CharField(blank=True, max_length=150, verbose_name='Адресс работы')),
                ('oms_policy', models.CharField(blank=True, max_length=16, unique=True, verbose_name='Полис ОМС')),
                ('insurance', models.CharField(blank=True, choices=[('1', 'АО «Медицинская акционерная страховая компания» (АО «МАКС-М»)'), ('6', 'ООО «КАПИТАЛ МС» '), ('4', 'АО «Страховая компания «СОГАЗ-Мед»»'), ('3', 'ООО «Страховая медицинская компания РЕСО-МЕД» (Московский филиал)'), ('5', 'ООО «Страховая компания «Ингосстрах-М»'), ('2', 'ООО «МСК «МЕДСТРАХ»»')], max_length=1, verbose_name='Сраховая компания')),
                ('snils', models.CharField(blank=True, max_length=11, unique=True, verbose_name='СНИЛС')),
                ('city_village', models.CharField(choices=[('1', 'Города'), ('2', 'Села')], max_length=1, verbose_name='Житель города/села')),
                ('address', models.CharField(blank=True, max_length=150, verbose_name='Адресс')),
                ('territory', models.CharField(choices=[('Барышский', 'Барышский район'), ('Инзенский', 'Инзенский район'), ('Кузоватовский', 'Кузоватовский район'), ('Сурский', 'Сурский район'), ('Сенгилеевский', 'Сенгилеевский район'), ('Карсунский', 'Карсунский район'), ('Цильнинский', 'Цильнинский район'), ('Новомалыклинский', 'Новомалыклинский район'), ('Павловский', 'Павловский район'), ('Вешкаймский', 'Вешкаймский район'), ('Николаевский', 'Николаевский район'), ('Старокулаткинский', 'Старокулаткинский район'), ('Ульяновский', 'Ульяновский район'), ('Майнский', 'Майнский район'), ('Радищевский', 'Радищевский район'), ('Старомайнский', 'Старомайнский район'), ('Новоспасский', 'Новоспасский район'), ('Тереньгульский', 'Тереньгульский район'), ('Мелекесский', 'Мелекесский район'), ('Базарносызганский', 'Базарносызганский район'), ('Чердаклинский', 'Чердаклинский район ')], max_length=25, verbose_name='Территория')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
